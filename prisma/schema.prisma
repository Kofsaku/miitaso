// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  bio           String?
  avatar        String?
  role          UserRole  @default(WRITER)
  password      String
  posts         BlogPost[]
  comments      Comment[]
  likes         Like[]
  bookmarks     Bookmark[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model BlogPost {
  id            String    @id @default(cuid())
  title         String
  slug          String    @unique
  content       String
  excerpt       String
  featuredImage String?
  author        User      @relation(fields: [authorId], references: [id])
  authorId      String
  categories    BlogPostCategory[]
  tags          BlogPostTag[]
  status        PostStatus @default(DRAFT)
  publishedAt   DateTime?
  viewCount     Int       @default(0)
  readingTime   Int       @default(0)
  comments      Comment[]
  likes         Like[]
  bookmarks     Bookmark[]
  versions      PostVersion[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([slug])
  @@index([status, publishedAt])
  @@index([authorId])
}

model PostVersion {
  id            String    @id @default(cuid())
  post          BlogPost  @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String
  title         String
  content       String
  excerpt       String
  versionNumber Int
  createdAt     DateTime  @default(now())

  @@index([postId])
}

model Category {
  id            String    @id @default(cuid())
  name          String    @unique
  slug          String    @unique
  description   String?
  parentId      String?
  parent        Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children      Category[] @relation("CategoryHierarchy")
  posts         BlogPostCategory[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([slug])
}

model Tag {
  id            String    @id @default(cuid())
  name          String    @unique
  slug          String    @unique
  posts         BlogPostTag[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([slug])
}

model BlogPostCategory {
  post          BlogPost  @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String
  category      Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId    String

  @@id([postId, categoryId])
}

model BlogPostTag {
  post          BlogPost  @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String
  tag           Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId         String

  @@id([postId, tagId])
}

model Comment {
  id            String    @id @default(cuid())
  content       String
  post          BlogPost  @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String
  author        User      @relation(fields: [authorId], references: [id])
  authorId      String
  parentId      String?
  parent        Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies       Comment[] @relation("CommentReplies")
  isApproved    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([postId])
  @@index([authorId])
}

model Like {
  id            String    @id @default(cuid())
  post          BlogPost  @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime  @default(now())

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Bookmark {
  id            String    @id @default(cuid())
  post          BlogPost  @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime  @default(now())

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Subscriber {
  id            String    @id @default(cuid())
  email         String    @unique
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum UserRole {
  ADMIN
  EDITOR
  WRITER
}

enum PostStatus {
  DRAFT
  REVIEW
  PUBLISHED
  ARCHIVED
}